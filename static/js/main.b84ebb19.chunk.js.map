{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/Pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","markComplete","console","log","this","id","title","style","type","onChange","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","placeholder","flex","className","About","Fragment","App","item","filter","newTodo","uuid","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b84ebb19.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n\n\n    getStyle = () => {\n        return {\n            background: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ?\n                'line-through' : 'none'\n        }\n    }\n\n    markComplete = () => {\n        console.log(this.props)\n    }\n\n    render() {\n        const { id, title } = this.props.todo;\n\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} />\n                    { title }\n                    <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>X</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n// PropTypes\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff',\n    border: 'none',\n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right'\n}\n\nexport default TodoItem\n ","import React, { Component } from 'react';\nimport Todoitem from './TodoItem';\nimport PropTypes from 'prop-types';\n\nclass Todos extends Component {\n \n\n  render() {\n    return this.props.todos.map((todo) => (\n      <Todoitem   \n        key={todo.id} \n        todo={todo} \n        markComplete={this.props.markComplete} \n        delTodo={this.props.delTodo} \n      />\n    ));\n  } \n}\n\n// PropTypes\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired\n}\n\nexport default Todos;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>TodoList</h1> \n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst linkStyle = {\n    color: '#fff',\n    textDecoration: 'none'\n}\n\nexport default Header;\n","import React, { Component } from 'react'\n\nexport class AddTodo extends Component {\n    state = {\n        title: ''\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({ title: '' });\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\n                <input \n                    type=\"text\"\n                    name=\"title\"\n                    placeholder=\"Add Todo...\"\n                    style={{flex: '10', padding: '5px'}}\n                    value={this.state.title}\n                    onChange={this.onChange}\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Submit\"\n                    className=\"btn\"\n                    style={{flex: '1'}}\n                />\n            </form>\n        )\n    }\n}\n\nexport default AddTodo\n","import React from 'react'\n\nfunction About() {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is the TodoList app v1.0.</p>\n        </React.Fragment>\n    )\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/Pages/About';\nimport uuid from 'react-uuid';\n\nclass App extends Component {\n  state = {\n    todos: []\n  } \n  \n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(item => {\n        if(item.id === id) {\n          item.completed = !item.completed;\n        }\n        return item;\n      })\n    })\n  }\n\n  delTodo = (id) => {\n    this.setState({\n      todos: [...this.state.todos.filter(item => item.id !== id)]\n    })\n  }\n\n  addTodo = (title) => {\n    const newTodo = {\n      id: uuid(),\n      title: title,\n      completed: false\n    }\n    this.setState({ todos: [...this.state.todos, newTodo] });\n  }\n\n  render() {\n\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n              <Route exact path=\"/\" render={props => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todos \n                    todos={this.state.todos} \n                    markComplete={this.markComplete}\n                    delTodo={this.delTodo}\n                  />\n                </React.Fragment>\n              )} />\n              <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router> \n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}